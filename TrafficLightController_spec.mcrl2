
% Data Types Definitions: 
sort 	
	LightColorState = struct Green | Orange | Red;
	WeatherCondition = struct Dry | Snowing | Raining;

sort
	TrafficRequestStates = List(Bool);
map
	requestGreenOnLightP: TrafficRequestStates # Nat # Nat # Bool -> TrafficRequestStates;

	% Mappings
	requestGreenOnLight: TrafficRequestStates # Nat -> TrafficRequestStates;
	clearRequestOnLight: TrafficRequestStates # Nat -> TrafficRequestStates;
var
	rs: TrafficRequestStates;
	i: Nat;
	t: Nat;
	s: Bool;
eqn
	requestGreenOnLightP([], i, t, s) = [];
	i == t -> requestGreenOnLightP(rs, i, t, s) = s |> requestGreenOnLightP(tail(rs), i + 1, t, s);  
	i != t -> requestGreenOnLightP(rs, i, t, s) = head(rs) |> requestGreenOnLightP(tail(rs), i + 1, t, s);

	% Mappings
	requestGreenOnLight(rs, t) = requestGreenOnLightP(rs, 0, t, true);
	clearRequestOnLight(rs, t) = requestGreenOnLightP(rs, 0, t, false);

% Variables
map
 	traffic_light_count: Nat;
eqn
	traffic_light_count = 3;

% Actions Definitions: External 
act 
	ShowLight: Nat # LightColorState;
	LightTimeout: Nat # LightColorState;
	UserDetected: Nat # Bool;
	EVApproaching: Nat;
	EVPassed: Nat;
	Weather: WeatherCondition;

% Actions Definitions: Internal
act 
	EVPoll: Nat;
	WeatherPoll;
	CycleDone: Nat;
	BadWeather: Bool;
	RequestGreen: Nat;
	EVDetected: Nat # Bool;

% Process: 
proc 
	LightController(trafficLight: Nat, color: LightColorState) = 
		(color == Red) -> 
			sum anyTrafficLight: Nat . (anyTrafficLight < trafficLightAmount) -> 
				RequestGreen(anyTrafficLight) .
				ShowLight(anyTrafficLight, Green) .
				LightController(anyTrafficLight, Green) 
		+
		(color == Green) ->
			LightTimeout(trafficLight, Green) .
			ShowLight(trafficLight, Orange) .
			LightController(trafficLight, Orange)
		+
		(color == Orange) ->
				LightTimeout(trafficLight, Orange) .
				ShowLight(trafficLight, Red) .
				CycleDone(trafficLight) .
				LightController(trafficLight, Red)
	;
	EVComponent(lanes: TrafficRequestStates) =
		sum t: Nat. (t < traffic_light_count) ->
			EVApproaching(t) .
			EVComponent(requestGreenOnLight(lanes, t))
		+
		sum t: Nat. (t < traffic_light_count) ->
			EVPassed(t) .
			EVComponent(clearRequestOnLight(lanes, t))
		+
		sum t: Nat. (t < traffic_light_count) ->
			EVPoll(t) .
			EVDetected(t, lanes . t) .
			EVComponent(lanes)
	;

init LightController(0, Red);
