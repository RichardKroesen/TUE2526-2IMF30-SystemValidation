
% Actions Definitions: Internal
act
	% Weather polling
	SendWeatherPoll;
	RecvWeatherPoll;
	WeatherPoll;
	SendBadWeather: Bool;
	RecvBadWeather: Bool;
	BadWeather: Bool;

	% EV polling
	SendEVPoll: Nat;
	RecvEVPoll: Nat;
	EVPoll: Nat;
	SendEVPresent: Nat # Bool;
	RecvEVPresent: Nat # Bool;
	EVPresent: Nat # Bool;

	% Light timeouts
	SendRequestGreen: Nat;
	RecvRequestGreen: Nat;
	RequestGreen: Nat;
	SendCycleDone;
	RecvCycleDone;
	CycleDone;

% Actions Definitions: External 
act 
	ShowLight: Nat # LightColorState;
	LightTimeout: Nat # LightColorState;
	EVDetected: Nat # Bool;
	Weather: WeatherCondition;
	UserApproaching: Nat;
	UserPassed: Nat;
	UsersDetected: Nat # Bool;

% Constants
map
 	TRAFFIC_LIGHT_COUNT: Nat;
eqn
	% TRAFFIC_LIGHT_COUNT = 16;
	TRAFFIC_LIGHT_COUNT = 4;

% Data Types Definitions: 
sort 	
	LightColorState = struct Green | Orange | Red;
	WeatherCondition = struct Dry | Snowing | Raining;

% User management
sort
	Users = List(Nat);
map
	setUsers': Users # Nat # Nat # Nat -> Users;
	nudgeUsers': Users # Nat # Nat # Int -> Users;

	% Mappings
	setUsers: Users # Nat # Nat -> Users;
	incUsers: Users # Nat -> Users;
	decUsers: Users # Nat -> Users;
	defaultUsers: Users;
var
	l: Users;
	i: Nat;
	t: Nat;
	c: Nat;
	b: Int;
eqn
	setUsers'([], i, t, c) = [];
	i == t -> setUsers'(l, i, t, c) = c |> setUsers'(tail(l), i + 1, t, c);
	i != t -> setUsers'(l, i, t, c) = head(l) |> setUsers'(tail(l), i + 1, t, c);
	nudgeUsers'([], i, t, b) = [];
	i == t -> nudgeUsers'(l, i, t, b) = Int2Nat(head(l) + b) |> nudgeUsers'(tail(l), i + 1, t, b);
	i != t -> nudgeUsers'(l, i, t, b) = head(l) |> nudgeUsers'(tail(l), i + 1, t, b);

	% Mappings
	setUsers(l, t, c) = setUsers'(l, 0, t, c);
	incUsers(l, t) = nudgeUsers'(l, 0, t, 1);
	decUsers(l, t) = nudgeUsers'(l, 0, t, -1);
	defaultUsers = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];

% Traffic lights
sort
	TrafficLightStates = List(LightColorState);
map
	setTrafficLightState': TrafficLightStates # Nat # Nat # LightColorState -> TrafficLightStates;

	% Mappings
	setTrafficLightState: TrafficLightStates # Nat # LightColorState -> TrafficLightStates;
	defaultLights: TrafficLightStates;
var
	ts: TrafficLightStates;
	i: Nat;
	t: Nat;
	c: LightColorState;
eqn
	setTrafficLightState'([], i, t, c) = [];
	i == t -> setTrafficLightState'(ts, i, t, c) = c |> setTrafficLightState'(tail(ts), i + 1, t, c);
	i != t -> setTrafficLightState'(ts, i, t, c) = head(ts) |> setTrafficLightState'(tail(ts), i + 1, t, c);

	% Mappings
	setTrafficLightState(ts, t, c) = setTrafficLightState'(ts, 0, t, c);
	defaultLights = [Red, Red, Red, Red, Red, Red, Red, Red, Red, Red, Red, Red, Red, Red, Red, Red];

map
	isPedestrianLight: Nat -> Bool;

	% Pedestrian lights are the first n traffic lights, regular lights start after
	PEDESTRIAN_COUNT: Nat;
	REGULAR_COUNT: Nat;

	START_REGULAR_LIGHTS: Nat;
	START_PEDESTRIAN_LIGHTS: Nat;
var
	t: Nat;
eqn
	isPedestrianLight(t) = t < PEDESTRIAN_COUNT;

	PEDESTRIAN_COUNT = 2;

	START_REGULAR_LIGHTS = PEDESTRIAN_COUNT;
	START_PEDESTRIAN_LIGHTS = 0;

% Process: 
proc 
	LightComponent(lights: TrafficLightStates) =
		sum t: Nat. (t < TRAFFIC_LIGHT_COUNT) -> (
			(lights . t == Red) -> 
				RecvRequestGreen(t) .
				ShowLight(t, Green) .
				LightComponent(setTrafficLightState(defaultLights, t, Green))
			+
			(lights . t == Green) ->
				LightTimeout(t, Green) .
				ShowLight(t, Orange) .
				LightComponent(setTrafficLightState(lights, t, Orange))
			+
			(lights . t == Orange) ->
				LightTimeout(t, Orange) .
				ShowLight(t, Red) .
				SendCycleDone .
				LightComponent(setTrafficLightState(lights, t, Red))
		)
	;
	EVComponent(lights: TrafficLightStates) =
		sum t: Nat. (t < TRAFFIC_LIGHT_COUNT) -> ((
			EVDetected(t, true) .
			EVComponent(setTrafficLightState(lights, t, Green))
		) + (
			EVDetected(t, false) .
			EVComponent(setTrafficLightState(lights, t, Red))
		) + (
			RecvEVPoll(t) .
			SendEVPresent(t, lights . t == Green) .
			EVComponent(lights)
		))
	;
	WeatherComponent(current: WeatherCondition) =
		(sum new: WeatherCondition .
			Weather(new) .
			WeatherComponent(new)
		) + (
			RecvWeatherPoll .
			SendBadWeather(current != Dry) .
			WeatherComponent(current)
		)
	;

	RestartCycle =
		RecvCycleDone .
		EVChecking(0)
	;

	EVChecking(t: Nat) =
		(t == TRAFFIC_LIGHT_COUNT) ->
			BadWeatherChecking <>
			SendEVPoll(t) .
			((
				RecvEVPresent(t, true) .
				SendRequestGreen(t) .
				RestartCycle
			) + (
				RecvEVPresent(t, false) .
				EVChecking(t + 1)
			))
	;
	
	BadWeatherChecking =
		SendWeatherPoll .
		((
			RecvBadWeather(true) .
			CyclePedestrians(START_PEDESTRIAN_LIGHTS) .
			CycleRegular(START_REGULAR_LIGHTS)
		) + (
			RecvBadWeather(false) .
			CycleRegular(START_REGULAR_LIGHTS) .
			CyclePedestrians(START_PEDESTRIAN_LIGHTS)
		)) .
		RestartCycle
	;
	CycleRegular(t: Nat) =
		(t != (START_REGULAR_LIGHTS + (TRAFFIC_LIGHT_COUNT - PEDESTRIAN_COUNT))) ->
			((
				UsersDetected(t, true) .
				SendRequestGreen(t) .
				RestartCycle
			) + (
				UsersDetected(t, false) .
				CycleRegular(t + 1)
			))
	;
	CyclePedestrians(t: Nat) =
		(t != PEDESTRIAN_COUNT) ->
			((
				UsersDetected(t, true) .
				SendRequestGreen(t) .
				RestartCycle
			) + (
				UsersDetected(t, false) .
				CyclePedestrians(t + 1)
			))
	;

% init WeatherComponent(Dry);
init
%hide(
%	{
%		SendWeatherPoll,
%		RecvWeatherPoll,
%		WeatherPoll,
%		SendBadWeather,
%		RecvBadWeather,
%		BadWeather,
%		SendEVPoll,
%		RecvEVPoll,
%		EVPoll,
%		SendEVPresent,
%		RecvEVPresent,
%		EVPresent,
%		SendRequestGreen,
%		RecvRequestGreen,
%		RequestGreen,
%		SendCycleDone,
%		RecvCycleDone,
%		CycleDone
%	},
allow(
	{
		% External actions
		ShowLight,
		LightTimeout,
		EVDetected,
		Weather,
		UserApproaching,
		UserPassed,
		UsersDetected,

		% Multi actions
		WeatherPoll,
		BadWeather,
		EVPoll,
		EVPresent,
		RequestGreen,
		CycleDone
	},
comm(	{
		SendWeatherPoll|RecvWeatherPoll -> WeatherPoll,
		SendBadWeather|RecvBadWeather -> BadWeather,

		SendEVPoll|RecvEVPoll -> EVPoll,
		SendEVPresent|RecvEVPresent -> EVPresent,

		SendRequestGreen|RecvRequestGreen -> RequestGreen,
		SendCycleDone|RecvCycleDone -> CycleDone
	},
EVChecking(0) || WeatherComponent(Dry) || LightComponent(defaultLights) || EVComponent(defaultLights)
%)));
));
