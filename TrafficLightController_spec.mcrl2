
% Actions Definitions: Internal
act
	% Weather polling
	SendWeatherPoll;
	RecvWeatherPoll;
	WeatherPoll;
	SendBadWeather: Bool;
	RecvBadWeather: Bool;
	BadWeather: Bool;

	% EV polling
	SendEVPoll: Nat;
	RecvEVPoll: Nat;
	EVPoll: Nat;
	SendEVPresent: Nat # Bool;
	RecvEVPresent: Nat # Bool;
	EVPresent: Nat # Bool;

% Actions Definitions: External
act 
	ShowLight: Nat # LightColorState;
	LightTimeout: Nat # LightColorState;
	EVDetected: Nat # Bool;
	Weather: WeatherCondition;
	UsersDetected: Nat # Bool;

% Constants
map
 	TRAFFIC_LIGHT_COUNT: Nat;
	PED_SET: Set(Nat);
eqn
	TRAFFIC_LIGHT_COUNT = 8;
	PED_SET = {0, 1, 2, 3};

% Data Types Definitions
sort 	
	LightColorState = struct Green | Orange | Red;
	WeatherCondition = struct Dry | Snowing | Raining;

% Process
proc 
	% Parallel components
	EVComponent =
		sum t: Nat . (t < TRAFFIC_LIGHT_COUNT) -> (
			RecvEVPoll(t) .
			((
				EVDetected(t, true) .
				SendEVPresent(t, true)
			) + (
				EVDetected(t, false) .
				SendEVPresent(t, false)
			)) .
			EVComponent
		)
	;

	WeatherComponent =
		RecvWeatherPoll .
		(sum new: WeatherCondition .
			Weather(new) .
			SendBadWeather(new != Dry)
		) .
		WeatherComponent
	;

	UserDetectionComponent =
		CycleRegular .
		UserDetectionComponent
	;

	% Procedures to show green lights to traffic lights
	ShowGreenLightPedestrian(t: Nat) =
		ShowLight(t, Green) .
		UsersDetected(t, false) .
		ShowLight(t, Orange) .
		LightTimeout(t, Orange) .
		ShowLight(t, Red)
	;
	ShowGreenLightEV(t: Nat) =
		ShowLight(t, Green) .
		(LightTimeout(t, Green) + EVDetected(t, false)) .
		ShowLight(t, Orange) .
		LightTimeout(t, Orange) .
		ShowLight(t, Red)
	;
	ShowGreenLight(t: Nat) =
		ShowLight(t, Green) .
		(LightTimeout(t, Green) + UsersDetected(t, false)) .
		ShowLight(t, Orange) .
		LightTimeout(t, Orange) .
		ShowLight(t, Red)
	;
	
	% These procedures check an individual traffic light
	CheckEV(t: Nat) =
		SendEVPoll(t) .
		((
			RecvEVPresent(t, true) .
			ShowGreenLightEV(t)
		) + (
			RecvEVPresent(t, false)
		))
	;
	CheckRegular(t: Nat) =
		CycleEV .
		PedestrianChecking .
		((
			UsersDetected(t, true) .
			ShowGreenLight(t)
		) + (
			UsersDetected(t, false)
		))
	;
	CheckPedestrian(t: Nat) =
		CycleEV .
		((
			UsersDetected(t, true) .
			ShowGreenLightPedestrian(t)
		) + (
			UsersDetected(t, false)
		))
	;

	% These procedures ensure priorities are properly implemented
	PedestrianChecking = 
		SendWeatherPoll .
		((
			RecvBadWeather(true) .
			CyclePedestrians
		) + (
			RecvBadWeather(false)
		))
	;


	% These procedures cycle through their set of traffic lights
	CycleRegular =
		CheckRegular(4) .
		CheckRegular(5) .
		CheckRegular(6) .
		CheckRegular(7) .
		CyclePedestrians
	;
	CyclePedestrians =
		CheckPedestrian(0) .
		CheckPedestrian(1) .
		CheckPedestrian(2) .
		CheckPedestrian(3)
	;
	CycleEV =
		CheckEV(4) .
		CheckEV(5) .
		CheckEV(6) .
		CheckEV(7) 
	;

init
hide(
	{
		WeatherPoll,
		BadWeather,
		EVPoll,
		EVPresent
	},
allow(
	{
		% External actions
		ShowLight,
		LightTimeout,
		EVDetected,
		Weather,
		UsersDetected,

		% Multi actions
		WeatherPoll,
		BadWeather,
		EVPoll,
		EVPresent
	},
comm(	{
		SendWeatherPoll|RecvWeatherPoll -> WeatherPoll,
		SendBadWeather|RecvBadWeather -> BadWeather,

		SendEVPoll|RecvEVPoll -> EVPoll,
		SendEVPresent|RecvEVPresent -> EVPresent
	},
EVComponent || UserDetectionComponent || WeatherComponent
)));
