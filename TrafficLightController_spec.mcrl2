% Data Types Definitions: 
sort 	
	LightColorState = struct green | orange | red;
	WeatherCondition = struct dry | snowing | raining;

map trafficLightAmount:Nat;
eqn trafficLightAmount = 3;

% Actions Definitions: External 
act 
	ShowLight: Nat # LightColorState;
	LightTimeout: Nat # LightColorState;
	UserDetected: Nat # Bool;
	EV_Approaching: Nat;
	EV_Passed: Nat;
	Weather: WeatherCondition;

% Actions Definitions: Internal
act 
	EV_Poll, WeatherPoll;
	CycleDone: Nat;
	BadWeather: Bool;
	RequestGreen: Nat;
	EV_Detected: Nat # Bool;

% REQUIRED FOR PARSING CHECK! NOT ACTUAL LOGIC YET
proc 
	LightController(trafficLight:Nat, color: LightColorState) = 
		(color == red) -> 
			sum anyTrafficLight: Nat . (anyTrafficLight < trafficLightAmount) -> 
				RequestGreen(anyTrafficLight) .
				ShowLight(anyTrafficLight, green) .
				LightController(anyTrafficLight, green) 
		+
		(color == green) ->
			LightTimeout(trafficLight, green) .
			ShowLight(trafficLight, orange) .
			LightController(trafficLight, orange)
		+
		(color == orange) ->
				LightTimeout(trafficLight, orange) .
				ShowLight(trafficLight, red).
				CycleDone(trafficLight).
				LightController(trafficLight, red)
;

init LightController(0, red)
%	allow(
 %       {commRequestGreen, commCycleDone, RequestGreen, CycleDone, ShowLight, LightTimeout, receiveLightTimeout},
 %       comm({
 %           sendRequestGreen | receiveRequestGreen -> commRequestGreen,
 %           sendCycleDone | receiveCycleDone -> commCycleDone,
%            sendLightTimeout | receiveLightTimeout -> commLightTimeout
 %       })
%    )
;