
% Internal actions
act
	% Weather polling
	SendWeatherPoll;
	RecvWeatherPoll;
	WeatherPoll;
	SendBadWeather: Bool;
	RecvBadWeather: Bool;
	BadWeather: Bool;

	% EV polling
	SendEVPoll: Nat;
	RecvEVPoll: Nat;
	EVPoll: Nat;
	SendEVDetected: Nat # Bool;
	RecvEVDetected: Nat # Bool;
	EVDetected: Nat # Bool;

	% Light timeouts
	SendRequestGreen: Nat;
	RecvRequestGreen: Nat;
	RequestGreen: Nat;
	SendCycleDone: Nat;
	RecvCycleDone: Nat;
	CycleDone: Nat;

% Constants
map
 	TRAFFIC_LIGHT_COUNT: Nat;
eqn
	TRAFFIC_LIGHT_COUNT = 6;
	% TRAFFIC_LIGHT_COUNT = 3;

% Data Types Definitions: 
sort 	
	LightColorState = struct Green | Orange | Red;
	WeatherCondition = struct Dry | Snowing | Raining;

sort
	TrafficLightStates = List(LightColorState);
map
	setTrafficLightState': TrafficLightStates # Nat # Nat # LightColorState -> TrafficLightStates;
	defaultLights': Nat # TrafficLightStates -> TrafficLightStates;

	% Mappings
	setTrafficLightState: TrafficLightStates # Nat # LightColorState -> TrafficLightStates;
	defaultLights: TrafficLightStates;
var
	ts: TrafficLightStates;
	i: Nat;
	t: Nat;
	c: LightColorState;
eqn
	setTrafficLightState'([], i, t, c) = [];
	i == t -> setTrafficLightState'(ts, i, t, c) = c |> setTrafficLightState'(tail(ts), i + 1, t, c);
	i != t -> setTrafficLightState'(ts, i, t, c) = head(ts) |> setTrafficLightState'(tail(ts), i + 1, t, c);

	% Mappings
	setTrafficLightState(ts, t, c) = setTrafficLightState'(ts, 0, t, c);

	i == TRAFFIC_LIGHT_COUNT -> defaultLights'(i, ts) = [];
	i != TRAFFIC_LIGHT_COUNT -> defaultLights'(i, ts) = defaultLights'(i + 1, Red |> ts);
	% defaultLights = defaultLights'(0, []);
	defaultLights = [Red, Red, Red, Red, Red, Red];

% Actions Definitions: External 
act 
	ShowLight: Nat # LightColorState;
	LightTimeout: Nat # LightColorState;
	UserDetected: Nat # Bool;
	EVApproaching: Nat;
	EVPassed: Nat;
	Weather: WeatherCondition;

% Process: 
proc 
	LightComponent(lights: TrafficLightStates) =
		sum t: Nat. (t < TRAFFIC_LIGHT_COUNT) -> (
			(lights . t == Red) -> 
				RecvRequestGreen(t) .
				sum ree: Nat. (ree < TRAFFIC_LIGHT_COUNT) -> (
					(ree == t) -> ShowLight(ree, Green) +
					(ree != t) -> ShowLight(ree, Red)
				) .
				LightComponent(setTrafficLightState(defaultLights, t, Green))
			+
			(lights . t == Green) ->
				LightTimeout(t, Green) .
				ShowLight(t, Orange) .
				LightComponent(setTrafficLightState(lights, t, Orange))
			+
			(lights . t == Orange) ->
				LightTimeout(t, Orange) .
				ShowLight(t, Red) .
				SendCycleDone(t) .
				LightComponent(setTrafficLightState(lights, t, Red))
		)
	;
	EVComponent(lights: TrafficLightStates) =
		sum t: Nat. (t < TRAFFIC_LIGHT_COUNT) ->
			EVApproaching(t) .
			EVComponent(setTrafficLightState(lights, t, Green))
		+
		sum t: Nat. (t < TRAFFIC_LIGHT_COUNT) ->
			EVPassed(t) .
			EVComponent(setTrafficLightState(lights, t, Red))
		+
		sum t: Nat. (t < TRAFFIC_LIGHT_COUNT) ->
			RecvEVPoll(t) .
			SendEVDetected(t, lights . t == Green) .
			EVComponent(lights)
	;
	WeatherComponent(current: WeatherCondition) =
		sum new: WeatherCondition .
			Weather(new) .
			WeatherComponent(new)
		+
			RecvWeatherPoll .
			(
				(current == Dry) -> SendBadWeather(false) +
				(current != Dry) -> SendBadWeather(true)
			) .
			WeatherComponent(current)
	;
	Foo =
		SendWeatherPoll .
		RecvBadWeather(true) .
		SendRequestGreen(0) .
		Foo
	;


% init WeatherComponent(Dry);
init
allow(
	{
		SendWeatherPoll,
		RecvWeatherPoll,
		WeatherPoll,
		SendBadWeather,
		RecvBadWeather,
		BadWeather,
		SendEVPoll,
		RecvEVPoll,
		EVPoll,
		SendEVDetected,
		RecvEVDetected,
		EVDetected,
		SendRequestGreen,
		RecvRequestGreen,
		RequestGreen,
		SendCycleDone,
		RecvCycleDone,
		CycleDone
	},
comm(	{
		SendWeatherPoll|RecvWeatherPoll -> WeatherPoll,
		SendBadWeather|RecvBadWeather -> BadWeather,

		SendEVPoll|RecvEVPoll -> EVPoll,
		SendEVDetected|RecvEVDetected -> EVDetected,

		SendRequestGreen|RecvRequestGreen -> RequestGreen,
		SendCycleDone|RecvCycleDone -> CycleDone
	},
Foo || WeatherComponent(Dry) || LightComponent(defaultLights) || EVComponent(defaultLights)
));
