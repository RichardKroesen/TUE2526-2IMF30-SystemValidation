
% Actions Definitions: Internal
act
	% Weather polling
	SendWeatherPoll;
	RecvWeatherPoll;
	WeatherPoll;
	SendBadWeather: Bool;
	RecvBadWeather: Bool;
	BadWeather: Bool;

	% EV polling
	SendEVPoll: Nat;
	RecvEVPoll: Nat;
	EVPoll: Nat;
	SendEVPresent: Nat # Bool;
	RecvEVPresent: Nat # Bool;
	EVPresent: Nat # Bool;

	% Light timeouts
	SendRequestGreen: Nat;
	RecvRequestGreen: Nat;
	RequestGreen: Nat;
	SendCycleDone;
	RecvCycleDone;
	CycleDone;

% Actions Definitions: External 
act 
	ShowLight: Nat # LightColorState;
	LightTimeout: Nat # LightColorState;
	EVDetected: Nat # Bool;
	Weather: WeatherCondition;
	UsersDetected: Nat # Bool;

% Constants
map
 	TRAFFIC_LIGHT_COUNT: Nat;
 	PEDESTRIAN_COUNT: Nat;
	PED_SET: Set(Nat);
eqn
	TRAFFIC_LIGHT_COUNT = 4;
	% PEDESTRIAN_COUNT	= 2;
	PED_SET = {0,1};

% Data Types Definitions: 
sort 	
	LightColorState = struct Green | Orange | Red;
	WeatherCondition = struct Dry | Snowing | Raining;

% Traffic lights
sort
	TrafficLightStates = List(LightColorState);
map
	setTrafficLightState': TrafficLightStates # Nat # Nat # LightColorState -> TrafficLightStates;

	% Mappings
	setTrafficLightState: TrafficLightStates # Nat # LightColorState -> TrafficLightStates;
	defaultLights: TrafficLightStates;
var
	ts: TrafficLightStates;
	i: Nat;
	t: Nat;
	c: LightColorState;
eqn
	setTrafficLightState'([], i, t, c) = [];
	i == t -> setTrafficLightState'(ts, i, t, c) = c |> setTrafficLightState'(tail(ts), i + 1, t, c);
	i != t -> setTrafficLightState'(ts, i, t, c) = head(ts) |> setTrafficLightState'(tail(ts), i + 1, t, c);

	% Mappings
	setTrafficLightState(ts, t, c) = setTrafficLightState'(ts, 0, t, c);
	defaultLights = [Red, Red, Red, Red];

% Process: 
proc 
	LightComponent(lights: TrafficLightStates) =
		sum t: Nat. (t < TRAFFIC_LIGHT_COUNT) -> (
			(lights . t == Red) -> 
				RecvRequestGreen(t) .
				ShowLight(t, Green) .
				LightComponent(setTrafficLightState(defaultLights, t, Green))
			+
			(lights . t == Green) ->
				LightTimeout(t, Green) .
				ShowLight(t, Orange) .
				LightComponent(setTrafficLightState(lights, t, Orange))
			+
			(lights . t == Orange) ->
				LightTimeout(t, Orange) .
				ShowLight(t, Red) .
				SendCycleDone .
				LightComponent(setTrafficLightState(lights, t, Red))
		)
	;
	EVComponent(lights: TrafficLightStates) =
		sum t: Nat. (t < TRAFFIC_LIGHT_COUNT && t in !(PED_SET)) -> ((
			EVDetected(t, true) .
			EVComponent(setTrafficLightState(lights, t, Green))
		) + (
			EVDetected(t, false) .
			EVComponent(setTrafficLightState(lights, t, Red))
		) + (
			RecvEVPoll(t) .
			SendEVPresent(t, lights . t == Green) .
			EVComponent(lights)
		))
	;
	WeatherComponent(current: WeatherCondition) =
		(sum new: WeatherCondition .
			Weather(new) .
			WeatherComponent(new)
		) + (
			RecvWeatherPoll .
			SendBadWeather(current != Dry) .
			WeatherComponent(current)
		)
	;
	UserDetectionComponent =
		SendWeatherPoll .
		((
			CycleRegular .
			CyclePedestrians .
			RecvBadWeather(true) 
		) + (
			CycleRegular .
			CyclePedestrians .
			RecvBadWeather(false)
		)) .
		UserDetectionComponent
	;

	
	EVChecking'(t: Nat) =
		SendEVPoll(t) .
		((
			RecvEVPresent(t, true) .
			SendRequestGreen(t) .
			RecvCycleDone
		) + (
			RecvEVPresent(t, false) .
			RecvCycleDone
		))
	;
	EVChecking =
		EVChecking'(0) .
		EVChecking'(1) .
		EVChecking'(2) .
		EVChecking'(3) 
		% EVChecking'(6)
		% EVChecking'(0) .
		% EVChecking'(1) .
		% EVChecking'(2) .
		% EVChecking'(3) .
		% EVChecking'(4) .
		% EVChecking'(5) .
		% EVChecking'(6) .
		% EVChecking'(7)
	;
	
	CycleRegular'(t: Nat) =
		EVChecking .
		((
			UsersDetected(t, true) .
			SendRequestGreen(t) .
			RecvCycleDone
		) + (
			UsersDetected(t, false)
		))
	;
	CycleRegular =
		CycleRegular'(2) .
		CycleRegular'(3) 
		% CycleRegular'(6) 
		% CycleRegular'(7)
	;

	CyclePedestrians'(t: Nat) =
		EVChecking .
		((
			UsersDetected(t, true) .
			SendRequestGreen(t) .
			RecvCycleDone
		) + (
			UsersDetected(t, false)
		))
	;
	CyclePedestrians =
		CyclePedestrians'(0) .
		CyclePedestrians'(1)
		% CyclePedestrians'(0) .
		% CyclePedestrians'(1) .
		% CyclePedestrians'(2) .
		% CyclePedestrians'(3)
	;

init
hide(
	{
		% WeatherPoll,
		BadWeather
		% EVPoll
		% EVPresent
		% RequestGreen,
		% CycleDone
	},
allow(
	{
		% External actions
		ShowLight,
		LightTimeout,
		EVDetected,
		Weather,
		UsersDetected,

		% Multi actions
		WeatherPoll,
		BadWeather,
		EVPoll,
		EVPresent,
		RequestGreen,
		CycleDone
	},
comm(	{
		SendWeatherPoll|RecvWeatherPoll -> WeatherPoll,
		SendBadWeather|RecvBadWeather -> BadWeather,

SendRequestGreen|RecvRequestGreen -> RequestGreen,
		SendEVPoll|RecvEVPoll -> EVPoll,
		SendEVPresent|RecvEVPresent -> EVPresent,

		SendCycleDone|RecvCycleDone -> CycleDone
	}, 
 EVComponent(defaultLights) || UserDetectionComponent || WeatherComponent(Dry) || LightComponent(defaultLights)
)));
