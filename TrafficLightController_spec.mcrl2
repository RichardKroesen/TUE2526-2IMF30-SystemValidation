
% Formatting
% 1) All actions are PascalCase
% 2) All functions (mappings) are camelCase
% 3) All variables are snake_case
% 4) All procedures are PascalCase
% 5) All sorts are PascalCase, including enum elements

% Data Types Definitions: 
sort 	
	LightColorState = struct Green | Orange | Red;
	WeatherCondition = struct Dry | Snowing | Raining;

map trafficLightAmount: Nat;
eqn trafficLightAmount = 16; % 12 Road . + 4 Pedestrian side

% Actions Definitions: External 
act 
	ShowLight: Nat # LightColorState;
	LightTimeout: Nat # LightColorState;
	UserDetected: Nat # Bool;
	EVApproaching: Nat;
	EVPassed: Nat;
	Weather: WeatherCondition;

% Actions Definitions: Internal
act 
	EVPoll, WeatherPoll;
	CycleDone: Nat;
	BadWeather: Bool;
	RequestGreen: Nat;
	EVDetected: Nat # Bool;

% Process: 
proc 
	LightController(trafficLight: Nat, color: LightColorState) = 
		(color == Red) -> 
			sum anyTrafficLight: Nat . (anyTrafficLight < trafficLightAmount) -> 
				RequestGreen(anyTrafficLight) .
				ShowLight(anyTrafficLight, Green) .
				LightController(anyTrafficLight, Green) 
		+
		(color == Green) ->
			LightTimeout(trafficLight, Green) .
			ShowLight(trafficLight, Orange) .
			LightController(trafficLight, Orange)
		+
		(color == Orange) ->
				LightTimeout(trafficLight, Orange) .
				ShowLight(trafficLight, Red) .
				CycleDone(trafficLight) .
				LightController(trafficLight, Red)
	;
	EVComponent(lanes: TrafficRequestStates) =
		sum t: Nat. (t < traffic_light_count) ->
			EVApproaching(t) .
			EVComponent(requestGreenOnLight(lanes, t))
		+
		sum t: Nat. (t < traffic_light_count) ->
			EVPassed(t) .
			EVComponent(clearRequestOnLight(lanes, t))
		+
		sum t: Nat. (t < traffic_light_count) ->
			EVPoll .
			EVDetected(t, lanes . t) .
			EVComponent(lanes)
	;

init LightController(0, Red);
