
% Actions Definitions: Internal
act
	% Weather polling
	SendWeatherPoll;
	RecvWeatherPoll;
	WeatherPoll;
	SendBadWeather: Bool;
	RecvBadWeather: Bool;
	BadWeather: Bool;

	% EV polling
	SendEVPoll: Nat;
	RecvEVPoll: Nat;
	EVPoll: Nat;
	SendEVPresent: Nat # Bool;
	RecvEVPresent: Nat # Bool;
	EVPresent: Nat # Bool;

% Actions Definitions: External
act 
	ShowLight: Nat # LightColorState;
	LightTimeout: Nat # LightColorState;
	EVDetected: Nat # Bool;
	Weather: WeatherCondition;
	UsersDetected: Nat # Bool;

% Constants
map
 	TRAFFIC_LIGHT_COUNT: Nat;
 	PEDESTRIAN_COUNT: Nat;
	PED_SET: Set(Nat);
eqn
	TRAFFIC_LIGHT_COUNT = 4;
	PED_SET = {0, 1};

% Data Types Definitions:
sort 	
	LightColorState = struct Green | Orange | Red;
	WeatherCondition = struct Dry | Snowing | Raining;

% Process:
proc 
	ShowGreenLightEV(t: Nat) =
		ShowLight(t, Green) .
		(LightTimeout(t, Green) + EVDetected(t, false)) .
		ShowLight(t, Orange) .
		LightTimeout(t, Orange) .
		ShowLight(t, Red)
	;
	ShowGreenLight(t: Nat) =
		ShowLight(t, Green) .
		(LightTimeout(t, Green) + UsersDetected(t, false)) .
		ShowLight(t, Orange) .
		LightTimeout(t, Orange) .
		ShowLight(t, Red)
	;

	EVComponent =
		sum t: Nat . (t < TRAFFIC_LIGHT_COUNT) -> (
			RecvEVPoll(t) .
			((
				EVDetected(t, true) .
				SendEVPresent(t, true)
			) + (
				EVDetected(t, false) .
				SendEVPresent(t, false)
			)) .
			EVComponent
		)
	;

	WeatherComponent =
		RecvWeatherPoll .
		(sum new: WeatherCondition .
			Weather(new) .
			SendBadWeather(new != Dry)
		) .
		WeatherComponent
	;
	UserDetectionComponent =
		SendWeatherPoll .
		((
			RecvBadWeather(true) .
			CyclePedestrians .
			CycleRegular
		) + (
			RecvBadWeather(false) .
			CycleRegular .
			CyclePedestrians
		)) .
		UserDetectionComponent
	;

	
	EVChecking'(t: Nat) =
		SendEVPoll(t) .
		((
			RecvEVPresent(t, true) .
			ShowGreenLightEV(t)
		) + (
			RecvEVPresent(t, false)
		))
	;
	EVChecking =
		% We don't check pedestrian lights
		% In our model, no emergency vehicle may enter pedestrian roads
		EVChecking'(2) .
		EVChecking'(3) 
	;

	Check(t: Nat) =
		EVChecking .
		((
			UsersDetected(t, true) .
			ShowGreenLight(t)
		) + (
			UsersDetected(t, false)
		))
	;

	CycleRegular =
		Check(2) .
		Check(3)
	;
	CyclePedestrians =
		Check(0) .
		Check(1)
	;

init
%hide(
%	{
%		WeatherPoll,
%		BadWeather,
%		EVPoll,
%		EVPresent,
%		RequestGreen,
%		CycleDone
%	},
allow(
	{
		% External actions
		ShowLight,
		LightTimeout,
		EVDetected,
		Weather,
		UsersDetected,

		% Multi actions
		WeatherPoll,
		BadWeather,
		EVPoll,
		EVPresent
	},
comm(	{
		SendWeatherPoll|RecvWeatherPoll -> WeatherPoll,
		SendBadWeather|RecvBadWeather -> BadWeather,

		SendEVPoll|RecvEVPoll -> EVPoll,
		SendEVPresent|RecvEVPresent -> EVPresent
	},
EVComponent || UserDetectionComponent || WeatherComponent
%)));
));
