name: Makefile CI (build mCRL2 + verify properties)

on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  verify:
    runs-on: ubuntu-latest
    timeout-minutes: 90

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential git cmake cmake-curses-gui \
            qt6-base-dev libboost-dev python3 pkg-config ccache \
            libglu1-mesa-dev libgl1-mesa-dev mesa-common-dev libx11-dev

      - name: Build and install mCRL2 from source
        run: |
          MCRL2_INSTALL="$GITHUB_WORKSPACE/mcrl2"
          # Skip rebuild if already present (useful for reruns in same workspace)
          if [ -x "${MCRL2_INSTALL}/bin/mcrl22lps" ]; then
            echo "mCRL2 already installed in ${MCRL2_INSTALL}"
            exit 0
          fi
          git clone --depth 1 https://github.com/mCRL2org/mCRL2.git mcrl2-src
          mkdir -p mcrl2-src/build
          cd mcrl2-src/build
          cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX="${MCRL2_INSTALL}"
          cmake --build . -- -j$(nproc)
          cmake --install . --prefix "${MCRL2_INSTALL}"

      - name: Add mCRL2 to PATH
        run: |
          echo "$GITHUB_WORKSPACE/mcrl2/bin" >> $GITHUB_PATH
          echo "mcrl22lps -> $(which mcrl22lps || true)"
          mcrl22lps --version || true

      - name: Build pbes files
        run: make build-properties

      - name: Run property verification and count results
        run: |
          make verify-properties
          TRUE_COUNT=$(grep -h -x true build/*.status 2>/dev/null | wc -l || true)
          FALSE_COUNT=$(grep -h -x false build/*.status 2>/dev/null | wc -l || true)
          TOTAL=$((TRUE_COUNT + FALSE_COUNT))
          echo "Total properties checked: $TOTAL"
          echo "  true : $TRUE_COUNT"
          echo "  false: $FALSE_COUNT"
          if [ "$FALSE_COUNT" -gt 0 ]; then
            echo ""
            echo "Failed properties:"
            for f in build/*.status; do
              if [ -f "$f" ] && grep -q -x false "$f" 2>/dev/null; then
                echo " - $(basename "$f" .status)"
              fi
            done
            echo ""
            echo "One or more properties evaluated to false - failing job."
            exit 1
          fi
